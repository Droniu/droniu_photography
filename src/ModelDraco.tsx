/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Canon_Camera_part_c: THREE.Mesh
    Canon_Camera_part_b: THREE.Mesh
    Canon_Camera_part_d: THREE.Mesh
    Canon_Camera_part_a: THREE.Mesh
  }
  materials: {
    GLASS: THREE.MeshStandardMaterial
    ['UV MAP SHINY']: THREE.MeshStandardMaterial
    Chrome: THREE.MeshStandardMaterial
    ['UV MAP MATT']: THREE.MeshStandardMaterial
  }
}

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF('/modelDraco.gltf') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Canon_Camera_part_c.geometry} material={materials.GLASS} position={[1.44, 0.96, 0.62]} rotation={[0, 0, -0.08]} scale={1.18} />
      <mesh geometry={nodes.Canon_Camera_part_b.geometry} material={materials['UV MAP SHINY']} position={[2.19, 0.96, 0.62]} rotation={[0, 0, -0.08]} scale={1.18} />
      <mesh geometry={nodes.Canon_Camera_part_d.geometry} material={materials.Chrome} position={[0.1, 1.66, 1.8]} />
      <mesh geometry={nodes.Canon_Camera_part_a.geometry} material={materials['UV MAP MATT']} position={[0.43, -0.32, -0.31]} />
    </group>
  )
}

useGLTF.preload('/modelDraco.gltf')
